// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String          @unique
  auth          Auth?
  emailTemplate EmailTemplate[]
  leadSource    LeadSource[]
  sequence      Sequence[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Auth {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  password   String
  token      String?
  isLoggedIn Boolean  @default(false)
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model LeadSource {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  data      Json
  userId    String     @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  sequence  Sequence[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model EmailTemplate {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  subject   String
  body      String
  userId    String     @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  sequence  Sequence[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Sequence {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  leadSourceId    String        @db.ObjectId
  leadSource      LeadSource    @relation(fields: [leadSourceId], references: [id])
  emailTemplateId String        @db.ObjectId
  emailTemplate   EmailTemplate @relation(fields: [emailTemplateId], references: [id])
  userId          String        @db.ObjectId
  user            User          @relation(fields: [userId], references: [id])
  delayInterval   Int?
  delayUnit       String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
